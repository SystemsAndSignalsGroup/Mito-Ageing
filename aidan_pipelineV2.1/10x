#!/bin/sh
#PBS -N Alignment
#PBS -l walltime=00:30:00
#PBS -l select=1:ncpus=1:mem=1gb


: '
UPDATES to 2.1

-Asks and checks for the name of the mitochondrial chromosome for the species you align to
	This is needed and checked for by mitogetter
-There was an error in the flow control when the pipeline checked if the STAR expression matrix existed
	This has been fixed
'



#To run the script use qsub -v chemistry="insert_10x_chemistry",remap="TRUE(TRUE is default/set FALSE if needed) 10x_full_pipeline.sh
#If tired of entering parameters at the command line, fix their values below and just qsub 10x_full_pipeline.sh


#readily modifiable user parameters
chemistry="2"
#remap="(*default TRUE)/FALSE"
#skip_freebayes="TRUE/(default FALSE)"
#Give the correct name of the mitochondrial chromosome in species you're aligning to
#Needed for mitogetter
MitoChromosome="chrM"

: '
STEP 0 - Preliminaries

The initial steps here check that the relevant paths have been set up and that the command line inputs make sense.
Namely, it checks:
1) Samtools check
2) The user has specified the 10x chemistry to be used
3) If remapping checks the paths for the remapping done by minimap2
4) Check the relevant python modules are installed for the remap
5) Check the relevant paths are available for the MitoGetter.sh script to run
 
'

set -e

module load anaconda3/personal
source activate pipeline2.0

#Define the main functions that will be used to run the pipeline

preliminary_check () {
	#samtools check
	# Only the latest version of Samtools worked and conda update wouldn't work either. Hence the export
	echo "Prelim check 1: Samtools"
	export PATH=/rds/general/user/asm119/home/sc_mito_genet_pheno/samtools_install/bin:$PATH
	samcheck=$(samtools --version | grep "samtools")
	echo "	Using $samcheck"
	echo "	If samtools older than 1.10, please update, then proceed"



	echo "Prelim check 2: 10x chemistry"
	if [ $chemistry == 2 ]; then
		whitelist="$PBS_O_WORKDIR/10xv2_whitelist.txt"
		UMIlen="10"
		echo "	Pipeline assuming 10x chemistry v2"
		echo " 	prelim check 2 complete. proceeding"
	elif [ $chemistry == 3 ]; then	
		whitelist="$PBS_O_WORKDIR/10xv3_whitelist.txt"
		UMIlen="12"
		echo "	Pipeline assuming 10x chemistry v3"
		echo "	prelim check2 complete. proceeding"
	else
		echo "	No 10x chemistry specified. ABORTING!"
		echo "	Specify a chemistry"
		exit 111
	fi


	echo "Prelim check 3 & 4: Remapping"
	#remapping path environment checking
	DO_REMAP=${remap:-TRUE}
	if [ $DO_REMAP == TRUE ]; then
		#export the path to the remapping tools
		export PATH=$PBS_O_WORKDIR/remap_package:$PATH
		#Check the export worked
		hash remapping.py 2>/dev/null || { echo >&2 "remapping.py not found in the path. ABORTING!"; exit 1; }
		hash renamer.py 2>/dev/null || { echo >&2 "renamer.py not found in the path. ABORTING!"; exit 1; }
		hash retag.py 2>/dev/null || { echo >&2 "retag.py not found in the path. ABORTING!"; exit 1; }
		echo "	Remap sequence: Activated"
		echo "	prelim check 3 complte. proceeding"
		module_check.py
		echo "	all python modules installed"
		#The default should lead to FREEBAYES running
		SKIP_FREEBAYES=${skip_freebayes:-FALSE}
			echo "	skip_freebayes = $SKIP_FREEBAYES"
		echo "	prelim check 4 complete. proceeding"
	elif [ $DO_REMAP == FALSE ]; then
		echo "	Remap sequence: Deativated"
		echo "	prelim steps 3 & 4 complete. proceeding"
	else
		echo "	Invalid remap parameter value. ABORTING!"
		echo "	Remap parameter must either be TRUE or FALSE in all caps"
	fi


	echo "Prelim check 5: MitoGetter.sh"
	export PATH=$PBS_O_WORKDIR:$PATH
	hash split_script.py 2>/dev/null || { echo >&2 "split_script.py not found in the path. Aborting!"; exit 1; }
	hash MitoGetter.sh 2>/dev/null || { echo >&2 "MitoGetter.sh not found in the path. Aborting!"; exit 1; }
	if [ -n "$MitoChromosome" ]; then
		echo "	Mitochromosome name: $MitoChromosome"
	else
		echo "	Mitochromosome not specified: ABORTING!"
		echo "	Specify Mitchondrial Chromosome name!"
		exit 111
	fi
	echo "	prelim check 5 complete. proceeding"
}







: '
STEP 1 - ALIGNMENT

Now perform an alignment to the Genome using STARsolo.

One of the read files contains reads Cell Barcode and UMIs. Another contains the Genome reads.

For 10x Genomics, the fastq files should be in the order --readFilesIn genome.fastq.gz Barcode+UMI.fastq.gz. See the STARmanual, section 13 STARsolo

The whitelist of Barcodes that you provide to STARsolo depends on the "chemistry" used in sequencing. Google around until you get the right whitelist for the sequencing protocol that was used to produce the FASTQ files. We should have a copy of this whitelist available locally.

STARsolo should output a BAM file of the genome reads, each read tagged with Barcode and UMI separately

The parameter --soloCBstart and --soloCBlen require the start barcode start position and length respectively. This also depends on the sequencing technique used. Google around till you find the appropriate values. Dito fot the UMI equivalents
'


runSTAR () {
	echo "STEP 1:STARsolo Alignment - commencing"

	# I'm time stamping the different steps to see where the bottlenecks in this process are
	now="$(date +'%m/%d/%Y')"
	now2="$(date +'%r')"
	now="$(date +'%m/%d/%Y')"
	now2="$(date +'%r')"
	echo "$now" 
	echo "$now2"


	: '
	In this version of the pipeline STARsolo aligns all of the SRRs within a single GSM file simultaneously. These are assumed to be from multiple runs on the same librar. Therefore sequence them all together and make sure you deduplicate all the UMIs (For the love of god make sure you deduplicate)
	The long, rather forbidding looking pipeing of commands below gets the addresses of all the SRRs within the same GSM and puts it in a format that STARsolo can work with
	'
	


	#Get the addresses of all the read1 files in the GSM. This will be fed into STARsolo
	read1s=$(ls ${DATA_DIR}/SRR*/*_1.fastq.gz | sed '$!s/$/,/' | tr -d '\n')
	#ditto for the read2 files
	read2s=$(ls ${DATA_DIR}/SRR*/*_2.fastq.gz | sed '$!s/$/,/' | tr -d '\n')
	echo "	Read file destinations:"
	echo "$read1s"
	echo "$read2s"

	#Run STARsolo
	mkdir -p $OUT_DIR_ALIGN
	STAR --runThreadN 16 \
	--genomeDir $GENOME_DIR \
	--sjdbGTFfile $GTF \
	--readFilesCommand gunzip -c \
	--soloBarcodeReadLength 0 \
	--readFilesIn $read2s $read1s \
	--outTmpDir $TEMP_DIR \
	--outSAMattributes NH HI nM AS CR UR CB UB GX GN sS sQ sM \
	--outSAMtype BAM SortedByCoordinate \
	--soloUMIdedup 1MM_All \
	--outFileNamePrefix $OUT_DIR_ALIGN \
	--soloType Droplet \
	--soloCBwhitelist $whitelist \
	--soloCBstart 1 \
	--soloCBlen 16 \
	--soloUMIstart 17 \
	--soloUMIlen $UMIlen
	echo "Done."

	echo "	STAR Alignment - complete"


	: '
	STARsolo automatically outputs 3 files required to make an expression matrix, barcodes.tsv  features.tsv  matrix.mtx.
	In order for scanpy to work with these files, features.tsv needs to be renamed genes.tsv (I have no idea why, it just does)
	I therefore rename the file here
	'


	FILTERED_MATRIX="$SAMPLE_GSM/AlignSolo.out/Gene/filtered/"

	mv ${FILTERED_MATRIX}features.tsv ${FILTERED_MATRIX}genes.tsv
	echo "	Copying STAR outputs to $DATA_DIR"
	#rm -r $DATA_DIR/$SAMPLE_SRR
	#Copy the outputs of STAR back to the DATA_DIR
	cp -r ${SAMPLE_GSM} $DATA_DIR/
	echo "	Copy to STAR outputs to ephemeral space: success"
	echo "STEP 1 - complete" 
}




run_remap () {

	: '
	STEP 2 - Remapping with minimap2 and variant calling
	'

	echo "STEP 2: Minimap2 Remapping & Variant calling - commencing"
	# second time stamp
	now="$(date +'%m/%d/%Y')"
	now2="$(date +'%r')"
	echo "$now"
	echo "$now2"

	: '
	Making use of some scripts inspired by Souporcell pipeline, we realign the BAM files output from STARsolo with minimap2. Minimap2 is argued to be produce fewer false positive variants than STAR for variant calling, which will be done later in the pipeline

	This will only run if the DO_REMAP, paramter is TRUE, as determined by the user.
	'

	#Give the arguments for the remapper
	#Get the STAR aligned .bam to be remapped with minimap
	remap_BAMFILE=$1
	#Get the Barcodes to be remapped
	remap_barcodes=$2
	#Get the location of the .fa file which is used by minimap2
	remap_GENOMEfile=$3

	if [ $DO_REMAP == TRUE ]; then
		#run the remapping script. This should do a bunch of stuff to get the minimap2 realigned bam files
		#make make minimap2 output and a temporary file for bcftools to interact with
		mkdir -p $DATA_DIR/$SAMPLE_GSM/minimap2/temporary
		echo "	temporary file created"
		echo "	--skip_freebayes = $SKIP_FREEBAYES"
		echo "	commencing script"
		remapping.py -i $remap_BAMFILE \
		-b $remap_barcodes \
		-f $remap_GENOMEfile \
		-t 16 \
		-o $DATA_DIR/$SAMPLE_GSM/minimap2 \
		--skip_freebayes $SKIP_FREEBAYES
		echo "	script complete, and files should be in remap folder"
		echo "STEP 2 - complete"
	elif [ $DO_REMAP == FALSE ]; then
		echo "	Remapping deactivated. Skipping to STEP 3"
		echo "STEP 2 - complete"
	else
		echo "Invalid remap parameter value. ABORTING!"
		echo "If the pipeline got this far, you shouldn't be able to read this!"
		echo "Something terrible must have happened. Good Luck!"
		exit 111
	fi

}




run_MitoGetter () {
	# third time stamp
	now="$(date +'%m/%d/%Y')"
	now2="$(date +'%r')"
	echo "$now"
	echo "$now2"

	echo "STEP 3 - commencing"

	: ' STEP 3 - Getting only the mitochondrial reads
	'

	: '
	Here we call the MitoGetter.sh script.
	Should go through the full bam files and create a new bamfile for each cell containing only the mitochondrial reads

	This will be run for the STAR aligned and Minimap2 aligned BAM files. Modify this according to your neads

	Ensure the mitochondrial chromosome is named correctly for your species

	'
	
	#Get the .bam file to be worked on
	BAMFILE=$1
	#Get the name of the mitochondrial chromosome
	ChrMt=$2
	#Output Directory
	Output=$3
	#barcode whitelist used
	whitelist=$4

	echo "	Getting STAR aligned mitochondrial reads per cell"
	#split the star BAM, and put it into the star folder
	MitoGetter.sh $BAMFILE $ChrMt $Output $whitelist
	echo "	STAR mitoReads done"


	
	
	echo "run_MitoGetter - Complete"
}






#set up the main variables before the main pipeline runs


#The output directory of the STAR aligned BAM files

HOME_DIR="$WORK/sc_mito_genet_pheno/Ma/wat"
LISTS_DIR="$HOME_DIR/file_finder"
#SAMPLE_GSM=$(head -$PBS_ARRAY_INDEX $LISTS_DIR/unique_gsm_list.txt | tail -1 )
SAMPLE_GSM="GSM4331851"
#Navigate to the GSM file containing all of the SRRs
DATA_DIR="$RDS_PROJECT/sc-ageing/ephemeral/Datasets/AidanMa/wat/${SAMPLE_GSM}"


: '
Ensure that you point to the correct refernce genome. It is easy to accidentally align to the wrong species. (Sigh)
'

# Align the reads in the Fastq files using STARsolo
GENOME_DIR="${RDS_PROJECT}/sc-ageing/live/refs/referenceGenomeRat"
GENOME_NAME="/rds/general/project/sc-ageing/live/refs/referenceGenomeRat/Rattus_norvegicus.Rnor_6.0.dna.toplevel.fa"
# .gtf file used by STARsolo
GTF="/rds/general/project/sc-ageing/live/refs/referenceGenomeRat/Rattus_norvegicus.Rnor_6.0.99.gtf"
OUT_DIR_ALIGN="${SAMPLE_GSM}/Align"
TEMP_DIR="${RDS_PROJECT}sc-ageing/ephemeral/STARalignerTemp/${SAMPLE_GSM}"
rm ${TEMP_DIR}* -rf

THEBAM="$DATA_DIR/${SAMPLE_GSM}"
#STAR bam file name
STARBAM="$THEBAM/AlignAligned.sortedByCoord.out.bam"
#minimap2 bam file name
miniBAM="$DATA_DIR/$SAMPLE_GSM/minimap2/minimap_tagged_sorted.bam"
#minimap2 vcf files
miniVCF="$DATA_DIR/$SAMPLE_GSM/minimap2/merged_sorted_vcf.vcf.gz"




#MAIN PIPELINE RUN
#0 Run the preliminary sequence 
preliminary_check

#set the counter
c="0"
#1 Run STARsolo
if [ ! -d $THEBAM ]; then
	runSTAR
else
	echo "Pipeline restarting"
	echo "	BAM folder detected"
	c="1"
	echo "	Checking for STAR .bam file"
	if [ -f $STARBAM ]; then
		echo "	STAR Aligned .bam file detected"
	else
		echo "	STAR Aligned .bam file not detected. Aborting!"
		exit 111
	fi
	
	echo "	Checking for STAR expression matrix"
	
	if [ -d $THEBAM/AlignSolo.out/Gene/filtered ]; then
		echo "	STAR expression matrix found"
	else
		echo " 	STAR expression matrix not detected. Aborting!"
		exit 111
	fi

	echo "STEP 1 already complete. Moving to STEP 2"
fi

#2 Run the remap
#Set the Freebayes parameter
if [ $DO_REMAP == "TRUE" ]; then
	if [ ! -f $miniBAM ]; then
	STARbarcodes="$DATA_DIR/$SAMPLE_GSM/AlignSolo.out/Gene/filtered/barcodes.tsv"
		run_remap
	else
		echo "	minimap2 Aligned .bam file detected"
		if [ $SKIP_FREEBAYES == "TRUE" ]; then
			echo "	skip_freebayes selected"
			echo "	Moving to STEP 3"
		else
			if [ -f $miniVCF ]; then
				echo "	minimap2 vcfs detected"
				echo " 	Moving to STEP 3"
			else
				echo " 	No vcf detected"
				echo "	Running Freebayes"
				run_remap $STARBAM $STARbarcodes $GENOME_NAME
			fi
		fi
	fi 
fi

#3 Run MitoGetter for the STAR aligned bam
if [ ! -d $THEBAM/MitoReads ]; then
	echo "	Getting STAR aligned mitochondrial reads per cell"
	run_MitoGetter $STARBAM $MitoChromosome $THEBAM $whitelist
	echo "	STAR mitoReads done"
else
	echo "	STAR MitoReads directory detected"
	count=$(ls $THEBAM/MitoReads | wc -l)
	if [ $counts == "0" ]; then
		echo "	MitoReads file found, but empty"
		echo "	Assuming timeout error occurred in previous run"
		echo "	Re-running MitoGetter"
		run_MitoGetter $STARBAM $MitoChromosome $THEBAM $whitelist
	else
		echo "	STAR MitoReads already split"

	fi

fi
	
#4 Run MitoGetter for the minimap2 Aligned bam file

if [ $DO_REMAP == "TRUE" ]; then
	if [ ! -d $DATA_DIR/$SAMPLE_GSM/minimap2/MitoReads ];then
		echo "	Getting minimap aligned mitochondrial reads per cell"
		run_MitoGetter $miniBAM $MitoChromosome $THEBAM/minimap2 $whitelist
		echo "	minimap2 mitoReads done"
	else
		echo "	minimap2 MitoReads directory detected"
		count=$(ls $DATA_DIR/$SAMPLE_GSM/minimap2/MitoReads | wc -l)
		if [ $counts == "0" ]; then
			echo "	MitoReads file found, but empty"
			echo "	Assuming timeout error occurred in previous run"
			echo "	Re-running MitoGetter"
			run_MitoGetter $miniBAM $MitoChromosome $THEBAM/minimap2 $whitelist
		else
			echo "	minimap2 MitoReads already split"
		fi
	fi
elif [ $DO_REMAP == "FALSE" ]; then
	echo "	Remap sequence: Deativated"
	echo "	Ending"
else
	echo "	Invalid remap parameter value. ABORTING!"		
	echo "	If the pipeline got this far, you shouldn't be able to read this!"
	echo "	Something terrible must have happened. Good Luck!"
fi

#all complete
echo "PIPELINE COMPLETE!"
exit 111


: '
Work in progress
Adding a freebayes variant caller
'



samtools index $THEBAM/AlignAligned.sortedByCoord.out.bam
samtools view -b $THEBAM/AlignAligned.sortedByCoord.out.bam chrM > chrM.bam
samtools sort -t CB -o chrM_sorted_tags.bam chrM.bam

# copy the files back to the ephemeral space
cp chrM_sorted_tags.bam $THEBAM/sorted_tags_chrM.bam
cp chrM.bam $THEBAM/chrM.bam

echo "STEP 3 - complete"
echo "STEP 4 - commencing"
# Fourth time stamp
now="$(date +'%m/%d/%Y')"
now2="$(date +'%r')"
echo "$now"
echo "$now2"

: 'STEP 4 - Filtering out reads that do not have a BARCODE MATCH

This the step that I am currently least satisfied with in the pipeline as I think it throws away too many of the reads. I have a hunch that there is a way to force more BARCODES to align. cellranger (an alternative data processing protocol to STARsolo) has an option called force-cells to make more barcode alignments. There must be something similar to that in STARsolo

For now though, just filter out unaligned reads and hope for the best


Version1.2 update:
In this version of the pipeline I now call a python filtering script filter.py  This script should use the expression matrix produced by STARsolo. It will filter those cells and genes so only those with counts above a certain level are retained. Barcodes of those cells passing the thresholds will be returned in a file called filtered_barcodes.txt 
The samtools -D option can then be used on that list to retain only those reads which are in this list of barcods
 
'

#perform the filtering
python $PBS_O_WORKDIR/filter.py  -path ./$FILTERED_MATRIX -minGene 300 -minCells 10


# command to keep only the reads with aligned barcode tags in the filtered_barcodes.txt list
samtools view -D CB:filtered_barcodes.txt -o sorted_tags_chrM_only_BC.bam $THEBAM/sorted_tags_chrM.bam
cp sorted_tags_chrM_only_BC.bam $THEBAM/sorted_tags_chrM_only_BC.bam 

echo "STEP 4 - complete"
now="$(date +'%m/%d/%Y')"
now2="$(date +'%r')"
echo "$now"
echo "$now2"

echo "STEP 5 - commencing"

: ' STEP 5 - Splitting the BAM file

It calls a python script called split_script.py to split the BAM according to the aligned cell BARCODE tags. This file only requires the location of the BAM file to be split as an argument
'

mkdir -p MitoReads
python $PBS_O_WORKDIR/split_script.py sorted_tags_chrM_only_BC.bam MitoReads
cp -r MitoReads $THEBAM/MitoReads

echo "STEP 5 - complete"
now="$(date +'%m/%d/%Y')"
now2="$(date +'%r')"
echo "$now"
echo "$now2"
#echo "STEP 5 - commencing"


: ' STEP 6 - Variant calling

If somehow the program has reached this point without error, we can celebrate and be happy.

Simply run Alis variant caller python script. 


This step however has to call another bash script. This is because the variant caller should run in parallel on all individual cell bam files. This requires a different number of parallel jobs to the rest of this script

'
#make a list of individual cell file names
ls MitoReads > cells.txt
#copy this list out for later viewing
cp cells.txt $THEBAM

: '
#path to the variant calling script
variant_script="$HOME_DIR/variant_caller.sh"

#run the variant caller. 1st argument is the SRR
source $variant_script $SAMPLE_SRR

now="$(date +'%m/%d/%Y')"
now2="$(date +'%r')"
echo "$now"
echo "$now2"
'
#echo "STEP 5 - complete"
echo "FULL PIPELINE SUCCESS (HOPEFULLY)"







